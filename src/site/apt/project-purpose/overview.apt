                    ------
                    Amplafi Flow Goals
                    ------
                    Patrick Moore
                    ------
                    11 Feb 2009
                    ------

Need
 * Session state
   * Difficult to know when a value can be cleared from the session state.
 * APIs are second class citizens
   * APIs typically 

 * Problem with existing solutions

  * Existing frameworks are primarily controller frameworks and offer rich mechanism for describing how the user can navigate a website.
  * Existing frameworks assume many things about the users' method of interaction with the application. Trying to combine multiple frameworks,
such as Tapestry with Spring results in a tug-of-war between frameworks over which framework will provide the base javax.servlet implementation.
  * When adding new libraries to an existing code base, it is rarely possible to change which framework is controlling the servlet interaction. The corporate policy has standardized 

Purpose

 Amplafi-Flow provides a focused solution to the problem of managing state with applications (usually web).
Amplafi-Flow provides a framework to manage the model. Amplafi-Flow's core competency is managing data that needs
to exist across multiple (web usually) interactions before the changes are used to modify the persisted objects and 
stored in the database.

[Andy: workflow mention?]
[Pat: really state manager] - Easily confused with http session state within tapestry? ]

[Andy:Beanflow - definition for each state ? ]
 
Goals

 * Limited scope - do one thing and do it well.
 
 * Play well with others. 
  Amplafi-Flow can easily retrofitted to an existing project without global re-architecture or a global commitment. 
  It is possible for only part of a project to use amplafi-flow.
 
 * Limited to no expectations about the usage context.
  Amplafi-Flow can be used in a client java application or a "headless" server.
 
 * Configurable by non-technical project managers
 
 * Understandable and easily configured without having to read lots of documentation.
  Understandable and easily configured -- even for developers that have never looked at Amplafi-Flows before.
 
 * Encourage proper loose-coupling of different steps of a flow.
  The order of the flow steps should be easily rearranged by
  non-developers.
 
 * Enable clear demarcation of transaction boundaries.
  Amplafi-Flow enables cancel operations on a multi-page flow.
 
 * Enable incremental management of session state so there are no out-of-control http session sizes.
 
 * Fully support and enables forward/back browser actions without explicit transition definitions by the developer.
 
 * Enables user "in-progress" changes to be preserved without changing the business logic objects in a database.
 
 * Enable automatic test generation of the flows. 
 
 * API support - [Andy: "API support" does not seem to fit with "Session State Manager" - API support seems "active". "session state manager" seems "passive" ]
 [Andy: if "workflow" then feel "threatened" by http://www.activiti.org/, seam, etc. but if "session state manager" then do not feel threatened by BPM tools. ]
   

 * [Pat: more like Finite State Machine, rather than BPM / workflow engines ]

What does Amplafi-Flow do

 * segments session data allowing portions of the session to be garbage-collected. [Andy: we need to talk about webframeworks]
 * seamless manages conversion of the serialized representation.
 * automatic API creation
   * provides a standard mechanism to invoke a flow directly with a browser call.
   * this means that as a developer defines a ui wizard flow they are defining a API call that does the same thing.
   * every step of a sequence of steps can be represented by a unique uri that is not tied to the session. 
   * provides a standard way of returning the result of the flow.
 * provides a standardize way of managing changes so that cancel operations are trivial to support.
 * various operations can be segmented into different  flows that can all be active at the same time. 
  [[ note: have a url query parameter to determine which flow is active?]      

* Amplafi-Flow tracks which fields have changed. 
  * this makes it easy to merge changes when multiple users are making changes.
  * it also makes it possible to discard changes and restore the original values without 
     hitting the database. This preserve transaction isolation without involving the database resources.
      the cumulated changes should be applied. 
      
      This project manages program (usually web) flow and web page /web component generation. Currently this project is only integrated with Tapestry 4. However, the code is separated out and implementing different web UI frameworks should be possible. 

Amplafi-Flow-Core
 * has no dependencies on javax.servlet.* code
 * Amplafi-flow-core should not have concept of active flow. Amplafi-flow-(web)* should have the concept of current flow ( if the concept exists ) 

 Existing workflows 
  * security
  * branching rules. ( amplafi-flow has no rules defined in the xml )


High-level goals [Andy]

 As seen from the user perspective, so perhaps parts of those could belong to
 Amplafi-Flow-Web but let's assume that's irrelavent to the user.

 * Be able to start multiple times the same flow for the same user (think multiple tabs)
 * Ability to keep the current flow running when refreshing the page

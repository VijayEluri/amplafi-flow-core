                    ------
                    Getting started with Amplafi Flow
                    Dependency Injection
                    ------
                    9 Mar 2009
                    ------

Dependency Injection in working in various flow activities i.e. *FlowActivity.java.

Example

public class LogoutFlowActivity extends BroadcastProviderFlowActivity {

    private AuthenticationService authenticationService;

	@Override
    public FlowState finishFlow() {
        FlowState flowState = super.finishFlow();
        getAuthenticationService().logout();
        return flowState;
    }

    public void setAuthenticationService(AuthenticationService authenticationService) {
        this.authenticationService = authenticationService;
    }

    public AuthenticationService getAuthenticationService() {
        return authenticationService;
    }
    
}

 If you search references to method "public void setAuthenticationService(AuthenticationService authenticationService)" in the amplafi project, you will not find any.
Then who is calling the method 
setAuthenticationService(AuthenticationService authenticationService) 
where is the magic happening?


 The LogoutFlowActivity is called when a user clicks on "Sign out" link. The code of interest which does this is present in ShowUserDetail.html and relevant line is

 <a jwcid="logout@flow:FlowEntryPoint" stateful="false"><span key="label.signout">Sign Out</span></a>

The definition of LogoutFlowActivity is present in amplafi.memberflows.xml and the relevant section is 

<definition name="Logout" link-title="message:label.logout"
	pageName="Home" default-after-page="guest/Home">
	<activity name="logout" link-title="message:label.logout" invisible="true"
		class="com.amplafi.core.security.flows.LogoutFlowActivity"
		finishing="true" />
</definition>

If you set a break point in class LogoutFlowActivity at following line

this.authenticationService = authenticationService;

the stack trace of this call looks like (actually its 99 lines long but I have kept only important ones)

LogoutFlowActivity.setAuthenticationService(AuthenticationService) line: 36	
PropertyAdaptor.write(Object, Object) line: 92	
ServicesSetterImpl.wire(Object, Iterable<String>) line: 135	
ServicesSetterImpl.wire(Object) line: 36	
$ServicesSetter_11bab526549.wire(Object) line: not available	
SessionFlowManagement.autowire(Object) line: 371	
AmpFlowState.getActivity(int) line: 105	
AmpFlowState(FlowStateImpl).initializeFlow() line: 146	
AmpFlowState(FlowStateImpl).begin() line: 118	
SessionFlowManagement(BaseFlowManagement).beginFlowState(FlowState) line: 240	
SessionFlowManagement.startFlowState(String, boolean, Map<String,String>) line: 251	
StartFlowFromDefinition.call() line: 71	
$FlowEntryPoint_409(FlowEntryPoint).doEnterFlow(FlowLauncher, String, Iterable<String>) line: 284	


 If you see the stack trace carefully it is evident that the property "authenticationService" is set when the flow is initialized. In case of FlowActivities we explicitly do the dependency injection and the relevant line from stack trace is
SessionFlowManagement.autowire(Object) line: 371 which in turns calls ServicesSetterImpl.wire(Object) line: 36 and this service setter sets all the services in class LogoutFlowActivity plus all the properties of the parent classes.

Few other points which shall be noted are:-

 *One important thing is that Flow Activity (*FlowActivity.java) should be stateless, that is there should be no member variables other than services or  Managers (Usually the classes which end in *Service or *Manager).

 *Almost anything that is declared in hivemodule.xml and the files included in hivemodule.xml can be easily accessed using getters/setters (For example TransPolSessionManager in LogoutFlowActivity.java


